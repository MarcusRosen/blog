AWSTemplateFormatVersion: 2010-09-09
Description: Configures CloudWatch Logs Destination for Cross-Account Log Streaming. Log Destination is backed by a Kinesis Data Stream and a Lambda Function is created subscribing to records in the Kinesis Stream.

Parameters:

  LogDestinationName:
    Type: String
    Description: The CloudWatch Logs Destination Name
    Default: CrossAccountLogStreamingDestination

  KinesisMessageDuration:
    Type: Number
    Description: Number of hours Kinesis will persist an record before it is purged.
    Default: 120

  AWSAccountList:
    Type: String
    Description: The list of AWS Accounts that are allowed to publish events to Log Group Destination. Use outer single quotes and inner double-quotes!
    Default: '"AcountNumberA", "AccountNumberB", "AccountNumberC"'

Resources:

  # Kinesis Data Stream used as the backing store for CloudWatch Logs Destination
  KinesisStream:
    Type: AWS::Kinesis::Stream
    Properties:
      ShardCount: 1
      Name: CrossAccountLogStream
      RetentionPeriodHours: !Ref KinesisMessageDuration

  # IAM Role for allowing CloudWatchs Log to write to Kinesis Stream
  CloudWatchLogsToKinesisRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          -
            Effect: Allow
            Principal:
              Service: [logs.amazonaws.com]
            Action:
              - sts:AssumeRole

 # IAM Policy for allowing CloudWatch Logs Role permission to add records to Kinesis Stream
  CloudWatchLogsPolicy:
      Type: AWS::IAM::Policy
      Properties:
        PolicyName: CloudWatchLogsToKinesisPolicy
        Roles:
          - !Ref CloudWatchLogsToKinesisRole
        PolicyDocument:
          Version: 2012-10-17
          Statement:
            -
              Effect: Allow
              Action:
                - kinesis:PutRecord
              Resource: !GetAtt KinesisStream.Arn
            -
              Effect: Allow
              Action:
                - iam:PassRole
              Resource: !GetAtt CloudWatchLogsToKinesisRole.Arn

  # The CloudWatch Logs Destination including resource policy allowing access from required AWS Accounts.
  CloudWatchDestination:
    Type: AWS::Logs::Destination
    DependsOn: CloudWatchLogsPolicy
    Properties:
      DestinationName: !Ref LogDestinationName
      RoleArn: !GetAtt CloudWatchLogsToKinesisRole.Arn
      TargetArn: !GetAtt KinesisStream.Arn
      DestinationPolicy: !Sub >
        {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "AWS": [${AWSAccountList}]
              },
              "Action": "logs:PutSubscriptionFilter",
              "Resource": "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:destination:${LogDestinationName}"
            }
          ]
        }

  LambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          -
            Effect: Allow
            Principal:
              Service: [lambda.amazonaws.com]
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaKinesisExecutionRole
        - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole

  LambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: Kinesis-Event-Retriever
      Role: !GetAtt LambdaRole.Arn
      Runtime: python3.6
      Handler: lambda_function.lambda_handler
      Timeout: 30 #seconds
      MemorySize: 128 #max memory foot print
      Code:
        ZipFile:  |
          import base64
          import gzip
          import json
          import logging

          # Setup logging configuration
          logging.basicConfig()
          logger = logging.getLogger()
          logger.setLevel(logging.DEBUG)

          def unpack_kinesis_stream_records(event):

              # decode and decompress each base64 encoded data element
              return [gzip.decompress(base64.b64decode(k["kinesis"]["data"])).decode('utf-8') for k in event["Records"]]

          def decode_raw_cloud_trail_events(cloudTrailEventDataList):

              #Convert Raw Event Data List
              eventList =  [json.loads(e) for e in cloudTrailEventDataList]

              #Filter out-non DATA_MESSAGES
              filteredEvents = [e for e in eventList if e["messageType"] == 'DATA_MESSAGE']

              #Covert each indidual log Event Message
              events = []
              for f in filteredEvents:
                  for e in f["logEvents"]:
                      events.append(json.loads(e["message"]))

              logger.info("{0} Event Logs Decoded".format(len(events)))
              return events

          def handle_request(event, context):

              #Log Raw Kinesis Stream Records
              logger.debug(json.dumps(event, indent=4))

              # Unpack Kinesis Stream Records
              kinesisData = unpack_kinesis_stream_records(event)
              [logger.debug(k) for k in kinesisData]

              # Decode and filter events
              events = decode_raw_cloud_trail_events(kinesisData)

              ####### INTEGRATION CODE GOES HERE #########
              print(events)

              return f"Successfully processed {len(events)} records."

          def lambda_handler(event, context):
              return handle_request(event, context)




  # Event Source Mapping allowing Lambda Function to pull records from Kinesis
  LambdaEventSourceMapping:
    Type: AWS::Lambda::EventSourceMapping
    DependsOn: LambdaFunction
    Properties:
      EventSourceArn: !GetAtt KinesisStream.Arn
      FunctionName: Kinesis-Event-Retriever
      StartingPosition: TRIM_HORIZON

Outputs:

  CloudWatchLogsDestinationArn:
    Description: The ARN of the CloudWatch Destination (used for Cross Account Subscriptions)
    Value: !GetAtt CloudWatchDestination.Arn










